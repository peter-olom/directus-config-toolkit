name: Build and Publish Docker Images

on:
  push:
    tags:
      - "v*" # Core releases (triggers both Core+UI)
      - "ui-v*" # UI-only releases (triggers UI only)
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to build (default: latest)"
        required: false
        default: "latest"
  # Add workflow_run trigger to ensure it fires after release workflow
  workflow_run:
    workflows: ["Version and Publish Packages"]
    types:
      - completed
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  CORE_IMAGE_NAME: ${{ github.repository }}
  UI_IMAGE_NAME: ${{ github.repository }}-ui

permissions:
  contents: read
  packages: write

jobs:
  detect-tag-type:
    runs-on: ubuntu-latest
    outputs:
      is_core_release: ${{ steps.check-tag.outputs.is_core_release }}
      is_ui_release: ${{ steps.check-tag.outputs.is_ui_release }}
      version: ${{ steps.get-version.outputs.version }}
      triggered_by_workflow_run: ${{ steps.check-trigger.outputs.triggered_by_workflow_run }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check trigger type
        id: check-trigger
        run: |
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "triggered_by_workflow_run=true" >> $GITHUB_OUTPUT
            echo "Triggered by workflow_run event"
            
            # Get the latest tag
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            echo "Latest tag: $LATEST_TAG"
            
            if [[ "$LATEST_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "is_core_release=true" >> $GITHUB_OUTPUT
              echo "is_ui_release=false" >> $GITHUB_OUTPUT
              echo "Core release detected from workflow_run: $LATEST_TAG"
            elif [[ "$LATEST_TAG" =~ ^ui-v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "is_core_release=false" >> $GITHUB_OUTPUT
              echo "is_ui_release=true" >> $GITHUB_OUTPUT
              echo "UI release detected from workflow_run: $LATEST_TAG"
            else
              echo "is_core_release=false" >> $GITHUB_OUTPUT
              echo "is_ui_release=false" >> $GITHUB_OUTPUT
              echo "No valid release tag found: $LATEST_TAG"
            fi
          else
            echo "triggered_by_workflow_run=false" >> $GITHUB_OUTPUT
          fi

      - name: Check tag type
        id: check-tag
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            
            if [[ "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "is_core_release=true" >> $GITHUB_OUTPUT
              echo "is_ui_release=false" >> $GITHUB_OUTPUT
              echo "Core release detected: $TAG_NAME"
            elif [[ "$TAG_NAME" =~ ^ui-v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "is_core_release=false" >> $GITHUB_OUTPUT
              echo "is_ui_release=true" >> $GITHUB_OUTPUT
              echo "UI-only release detected: $TAG_NAME"
            else
              echo "is_core_release=false" >> $GITHUB_OUTPUT
              echo "is_ui_release=false" >> $GITHUB_OUTPUT
              echo "Unknown tag format: $TAG_NAME"
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual dispatch - build both
            echo "is_core_release=true" >> $GITHUB_OUTPUT
            echo "is_ui_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Get version from tag
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            if [[ "$TAG_NAME" =~ ^v(.+)$ ]]; then
              VERSION="${BASH_REMATCH[1]}"
            elif [[ "$TAG_NAME" =~ ^ui-v(.+)$ ]]; then
              VERSION="${BASH_REMATCH[1]}"
            else
              VERSION="$TAG_NAME"
            fi
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            # Get version from the latest tag
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
            if [[ "$LATEST_TAG" =~ ^v(.+)$ ]]; then
              VERSION="${BASH_REMATCH[1]}"
            elif [[ "$LATEST_TAG" =~ ^ui-v(.+)$ ]]; then
              VERSION="${BASH_REMATCH[1]}"
            else
              VERSION="$LATEST_TAG"
            fi
          else
            VERSION="${{ github.event.inputs.tag || 'latest' }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Determined version: $VERSION"

  build-and-push-core:
    needs: detect-tag-type
    if: needs.detect-tag-type.outputs.is_core_release == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Core Docker Image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.CORE_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.detect-tag-type.outputs.version }},enable=${{ github.event_name == 'workflow_run' }}
            type=raw,value=${{ github.event.inputs.tag || 'latest' }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Build and push Core Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./packages/core
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-and-push-ui:
    needs: [detect-tag-type, build-and-push-core]
    if: |
      always() && 
      (needs.detect-tag-type.outputs.is_ui_release == 'true' || 
       needs.detect-tag-type.outputs.is_core_release == 'true' || 
       github.event_name == 'workflow_dispatch') &&
      (needs.build-and-push-core.result == 'success' || needs.build-and-push-core.result == 'skipped')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for UI Docker image
        id: meta-ui
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.UI_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.detect-tag-type.outputs.version }},enable=${{ github.event_name == 'workflow_run' }}
            type=raw,value=${{ github.event.inputs.tag || 'latest' }},enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Build and push UI Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/ui/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-ui.outputs.tags }}
          labels: ${{ steps.meta-ui.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  comment-on-release:
    needs: [detect-tag-type, build-and-push-core, build-and-push-ui]
    if: always() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Comment on release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tagName = context.ref.replace('refs/tags/', '');
            const isCore = tagName.match(/^v[0-9]+\.[0-9]+\.[0-9]+$/);
            const isUI = tagName.match(/^ui-v[0-9]+\.[0-9]+\.[0-9]+$/);

            if (!isCore && !isUI) {
              console.log(`Skipping comment for non-release tag: ${tagName}`);
              return;
            }

            // Find the release for this tag (only for core releases)
            if (isCore) {
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              const release = releases.data.find(r => r.tag_name === tagName);
              if (!release) {
                console.log(`No release found for tag ${tagName}`);
                return;
              }

              // Comment on the release
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                body: release.body + '\n\n✅ Docker images have been successfully built and published.'
              });
            }
