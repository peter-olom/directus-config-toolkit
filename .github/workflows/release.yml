name: Version and Publish Packages

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_type:
        description: "Type of version bump"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      package:
        description: "Package to release"
        required: true
        type: choice
        options:
          - core
          - ui
          - both

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      core_changed: ${{ steps.filter.outputs.core }}
      ui_changed: ${{ steps.filter.outputs.ui }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            core:
              - 'packages/core/**'
            ui:
              - 'packages/ui/**'

  determine-core-version:
    needs: detect-changes
    if: |
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.package == 'core' || github.event.inputs.package == 'both')) ||
      (github.event_name == 'push' && needs.detect-changes.outputs.core_changed == 'true')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.determine-version.outputs.version }}
      version_type: ${{ steps.determine-version.outputs.version_type }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Determine version type
        id: version-type
        if: github.event_name == 'push'
        run: |
          # Get the most recent commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Major: BREAKING CHANGE or "!:" in header
          if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* || "$COMMIT_MSG" =~ ^.*!:.*$ ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          # Minor: any feat
          elif [[ "$COMMIT_MSG" =~ ^feat ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

          echo "Commit message: $COMMIT_MSG"
          echo "Determined version type: $(grep '^type=' $GITHUB_OUTPUT | cut -d= -f2)"

      - name: Determine final version
        id: determine-version
        run: |
          # Use the determined version type or the input from workflow dispatch
          if [ "${{ github.event_name }}" == "push" ]; then
            VERSION_TYPE="${{ steps.version-type.outputs.type }}"
          else
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
          fi

          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT

          # Read current version from core package.json
          cd packages/core
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Calculate new version
          if [ "$VERSION_TYPE" = "patch" ]; then
            MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
            MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
            PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
            PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          elif [ "$VERSION_TYPE" = "minor" ]; then
            MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
            MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
            MINOR=$((MINOR + 1))
            NEW_VERSION="$MAJOR.$MINOR.0"
          elif [ "$VERSION_TYPE" = "major" ]; then
            MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
            MAJOR=$((MAJOR + 1))
            NEW_VERSION="$MAJOR.0.0"
          else
            NEW_VERSION="$VERSION_TYPE"
          fi

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Core version bump: $VERSION_TYPE, new version: $NEW_VERSION"

  determine-ui-version:
    needs: detect-changes
    if: |
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.package == 'ui' || github.event.inputs.package == 'both')) ||
      (github.event_name == 'push' && needs.detect-changes.outputs.ui_changed == 'true' && needs.detect-changes.outputs.core_changed == 'false')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.determine-version.outputs.version }}
      version_type: ${{ steps.determine-version.outputs.version_type }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Determine version type
        id: version-type
        if: github.event_name == 'push'
        run: |
          # Get the most recent commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Major: BREAKING CHANGE or "!:" in header
          if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* || "$COMMIT_MSG" =~ ^.*!:.*$ ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          # Minor: any feat
          elif [[ "$COMMIT_MSG" =~ ^feat ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

          echo "Commit message: $COMMIT_MSG"
          echo "Determined version type: $(grep '^type=' $GITHUB_OUTPUT | cut -d= -f2)"

      - name: Determine final version
        id: determine-version
        run: |
          # Use the determined version type or the input from workflow dispatch
          if [ "${{ github.event_name }}" == "push" ]; then
            VERSION_TYPE="${{ steps.version-type.outputs.type }}"
          else
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
          fi

          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT

          # Read current version from UI package.json
          cd packages/ui
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Calculate new version
          if [ "$VERSION_TYPE" = "patch" ]; then
            MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
            MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
            PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
            PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          elif [ "$VERSION_TYPE" = "minor" ]; then
            MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
            MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
            MINOR=$((MINOR + 1))
            NEW_VERSION="$MAJOR.$MINOR.0"
          elif [ "$VERSION_TYPE" = "major" ]; then
            MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
            MAJOR=$((MAJOR + 1))
            NEW_VERSION="$MAJOR.0.0"
          else
            NEW_VERSION="$VERSION_TYPE"
          fi

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "UI version bump: $VERSION_TYPE, new version: $NEW_VERSION"

  release-core:
    needs: [detect-changes, determine-core-version]
    if: |
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.package == 'core' || github.event.inputs.package == 'both')) ||
      (github.event_name == 'push' && needs.detect-changes.outputs.core_changed == 'true')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ needs.determine-core-version.outputs.version }}
    permissions:
      contents: write
      packages: write
      id-token: write # For NPM provenance

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - run: npm ci

      - name: Update version locally
        id: version-update
        run: |
          cd packages/core

          # Use centrally determined version
          VERSION="${{ needs.determine-core-version.outputs.version }}"

          # Store original version for potential rollback
          ORIGINAL_VERSION=$(node -p "require('./package.json').version")
          echo "original_version=$ORIGINAL_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$VERSION" >> $GITHUB_OUTPUT

          # Update package.json with exact version number (locally only)
          npm version $VERSION --no-git-tag-version
          git add package.json

      # Copy README to core package
      - name: Copy README to core package
        run: |
          cp README.md packages/core/README.md

      # Build packages
      - name: Build core package
        run: |
          cd packages/core
          npm run build

      # All validations passed - now commit and push
      - name: Commit and push version
        id: git-push
        run: |
          VERSION="${{ needs.determine-core-version.outputs.version }}"

          git commit -m "chore(core): release v$VERSION"
          git tag -a "v$VERSION" -m "Core v$VERSION"

          # Push commit and tags
          git push
          git push --tags

          echo "git_operations_completed=true" >> $GITHUB_OUTPUT

      # Publish to NPM
      - name: Publish to NPM
        run: |
          cd packages/core
          npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.determine-core-version.outputs.version }}
          generate_release_notes: true
          draft: false
          body: |
            ## Core Package v${{ needs.determine-core-version.outputs.version }}

            This release includes updates to the core package. Docker images are automatically built and published by the `Build and Publish Docker Images` workflow.

            ### NPM Package
            ```
            npm install @devrue/directus-config-toolkit@${{ needs.determine-core-version.outputs.version }}
            ```

            ### Docker Image
            ```
            docker pull ghcr.io/${{ github.repository }}:${{ needs.determine-core-version.outputs.version }}
            ```

      # Rollback on failure
      - name: Rollback on failure
        if: failure() && steps.git-push.outputs.git_operations_completed == 'true'
        run: |
          echo "::warning::Build or publish failed after git operations. Attempting rollback..."

          VERSION="${{ needs.determine-core-version.outputs.version }}"

          # Delete the remote tag if it was pushed
          git push --delete origin "v$VERSION" || echo "Remote tag deletion failed or tag wasn't pushed"

          # Delete local tag
          git tag -d "v$VERSION" || echo "Local tag deletion failed"

          # Reset to previous commit (before version bump)
          git reset --hard HEAD~1

          # Force push to revert the commit (if it was pushed)
          git push --force-with-lease || echo "Force push failed or commit wasn't pushed"

          echo "::error::Rollback completed. The version bump has been reverted."
          exit 1

  release-ui:
    needs: [detect-changes, determine-ui-version]
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.package == 'ui') ||
      (github.event_name == 'push' && needs.detect-changes.outputs.ui_changed == 'true' && needs.detect-changes.outputs.core_changed == 'false')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ needs.determine-ui-version.outputs.version }}
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - run: npm ci

      - name: Update UI version locally
        id: version-update
        run: |
          cd packages/ui
          VERSION="${{ needs.determine-ui-version.outputs.version }}"

          # Update package.json locally only
          npm version $VERSION --no-git-tag-version
          git add package.json

      - name: Commit and push UI version with tag
        id: git-push
        run: |
          VERSION="${{ needs.determine-ui-version.outputs.version }}"

          # Commit the version bump
          git commit -m "chore(ui): release v$VERSION"

          # Create UI-specific tag
          git tag -a "ui-v$VERSION" -m "UI v$VERSION"

          # Push commit and tags
          git push
          git push --tags

          echo "git_operations_completed=true" >> $GITHUB_OUTPUT

      - name: Rollback on failure
        if: failure() && steps.git-push.outputs.git_operations_completed == 'true'
        run: |
          echo "::warning::UI release failed after git operations. Attempting rollback..."

          VERSION="${{ needs.determine-ui-version.outputs.version }}"

          # Delete the remote tag if it was pushed
          git push --delete origin "ui-v$VERSION" || echo "Remote tag deletion failed"

          # Delete local tag
          git tag -d "ui-v$VERSION" || echo "Local tag deletion failed"

          # Reset to previous commit
          git reset --hard HEAD~1

          # Force push to revert
          git push --force-with-lease || echo "Force push failed"

          echo "::error::UI rollback completed."
          exit 1
